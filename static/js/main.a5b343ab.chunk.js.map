{"version":3,"sources":["components/Weather.js","components/DadJoke.js","util/util.js","components/Users.js","components/Clock.js","App.js","registerServiceWorker.js","index.js"],"names":["Weather","useState","data","setData","a","fetch","headers","then","res","json","useEffect","getWeather","console","log","className","city","name","country","Date","sunrise","toLocaleTimeString","sunset","list","slice","map","time","date","moment","dt","weather","temp","main","key","format","description","capitalize","width","height","src","icon","String","prototype","this","charAt","toUpperCase","DadJoke","getDadJoke","joke","shuffleArray","array","i","length","j","Math","floor","random","Users","checked","people","setPeople","setRandom","toggleCheck","e","person","target","onClick","outline","color","every","notChecked","disabled","some","randoms","filter","forEach","push","index","Clock","setTime","setInterval","App","props","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a5b343ab.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport * as moment from 'moment';\r\n\r\nString.prototype.capitalize = function() {\r\n    return this.charAt(0).toUpperCase() + this.slice(1)\r\n};\r\n\r\nexport function Weather() {\r\n    const [data, setData] = useState(null);\r\n\r\n    async function getWeather() {\r\n        fetch('http://api.openweathermap.org/data/2.5/forecast?zip=05446,us&units=imperial&APPID=cf3c7bcd5987d7405342cbced6febcdd', {\r\n            headers: {\r\n                'Accept': 'application/xml',\r\n                'User-Agent': 'https://github.com/chrisbendel/randomizer'\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setData(data);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getWeather()\r\n    }, []);\r\n\r\n    function renderForecast(list) {\r\n        return list.slice(0, 18).map(time => {\r\n            const date = moment(time.dt * 1000);\r\n            const weather = time.weather[0];\r\n            const temp = time.main;\r\n            return (\r\n                <div className=\"forecast-time\" key={time.dt}>\r\n                    <div className=\"datetime\">\r\n                        <div>{date.format(\"ddd, hA\")}</div>\r\n                        <div>{weather.description.capitalize()}</div>\r\n                        <img width={75} height={75} src={`http://openweathermap.org/img/wn/${weather.icon}@2x.png`}/>\r\n                        <h5>{temp.temp}&#8457;</h5>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n    if (!data) {\r\n        return <div>Loading Weather...</div>\r\n    }\r\n    console.log(data);\r\n\r\n    return (\r\n        <div className=\"weather-container\">\r\n            <div className=\"weather-city\">\r\n                <h4>\r\n                    {data.city.name}, {data.city.country}\r\n                </h4>\r\n                <h5>\r\n                    Sunrise: {new Date(data.city.sunrise * 1000).toLocaleTimeString()}\r\n                    <br/>\r\n                    Sunset: {new Date(data.city.sunset * 1000).toLocaleTimeString()}\r\n                </h5>\r\n            </div>\r\n            <div className=\"forecast\">\r\n                {renderForecast(data.list)}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\n\r\nexport function DadJoke() {\r\n    const [data, setData] = useState(null);\r\n\r\n    async function getDadJoke() {\r\n        return fetch('https://icanhazdadjoke.com/', {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'User-Agent': 'https://github.com/chrisbendel/randomizer'\r\n            }\r\n        }).then(res => res.json()).then(data => setData(data));\r\n    }\r\n\r\n    useEffect(() => {\r\n        getDadJoke()\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {data && data.joke}\r\n        </div>\r\n    )\r\n}\r\n","export const shuffleArray = array => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n};\r\n","import React, {useState} from 'react';\r\nimport {Button} from \"reactstrap\";\r\nimport {shuffleArray} from \"../util/util\";\r\n\r\nexport function Users() {\r\n    const [people, setPeople] = useState([\r\n        {name: 'Sam', checked: true},\r\n        {name: 'Doug', checked: true},\r\n        {name: 'Ben', checked: true},\r\n        {name: 'Dana', checked: false},\r\n        {name: 'Chris', checked: true}\r\n    ]);\r\n\r\n    const [random, setRandom] = useState([]);\r\n\r\n    function toggleCheck(e) {\r\n        setPeople(people.map(person => {\r\n            return {\r\n                ...person,\r\n                checked: person.name === e.target.name ? !person.checked : person.checked\r\n            }\r\n        }));\r\n        // const index = people.findIndex(p => p.name === e.target.name);\r\n        // people[index].checked = !people[index].checked;\r\n        // setPeople(people);\r\n    }\r\n\r\n    const selectAll = () => {\r\n        setPeople(people.map(person => ({\r\n            ...person,\r\n            checked: true\r\n        })));\r\n    };\r\n\r\n    const deselectAll = () => {\r\n        const notChecked = people.map(person => {\r\n            return {\r\n                name: person.name,\r\n                checked: false\r\n            }\r\n        });\r\n\r\n        setPeople(notChecked);\r\n    };\r\n\r\n    const allSelected = () => {\r\n        return people.every(person => person.checked);\r\n    };\r\n\r\n    const anySelected = () => {\r\n        return people.some(person => person.checked);\r\n    };\r\n\r\n    const getChecked = () => {\r\n        return people.filter(person => person.checked);\r\n    };\r\n\r\n    const generateRandom = () => {\r\n        const randoms = [];\r\n\r\n        getChecked().forEach(person => {\r\n            randoms.push(person.name);\r\n        });\r\n\r\n        setRandom(shuffleArray(randoms));\r\n    };\r\n\r\n    const renderRandom = () => {\r\n        return random.map((person, index) => {\r\n            return (\r\n                <p key={index} className=\"random-name\">\r\n                    {index + 1}. {person}\r\n                </p>\r\n            );\r\n        });\r\n    };\r\n\r\n    const renderPeople = () => {\r\n        return people.map(({name, checked}) => {\r\n            return (\r\n                <div key={name} className=\"person\">\r\n                    <Button onClick={toggleCheck} name={name} outline={!checked} color=\"primary\">\r\n                        {name}\r\n                    </Button>\r\n                </div>\r\n            );\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"people\">\r\n                {renderPeople()}\r\n            </div>\r\n\r\n            <div className=\"action-buttons\">\r\n                {allSelected() ?\r\n                    <Button className=\"all\" outline color=\"danger\" onClick={deselectAll}>\r\n                        Clear\r\n                    </Button>\r\n                    :\r\n                    <Button className=\"all\" outline color=\"secondary\" onClick={selectAll}>\r\n                        Select All\r\n                    </Button>\r\n                }\r\n                <Button disabled={!anySelected()} color=\"success\" onClick={generateRandom}>\r\n                    Randomize\r\n                </Button>\r\n            </div>\r\n            <div className=\"random\">\r\n                {random && renderRandom()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport * as moment from 'moment';\r\n\r\nexport function Clock() {\r\n    const [time, setTime] = useState(moment());\r\n\r\n    setInterval(() => {\r\n        setTime(moment());\r\n    }, 1000);\r\n\r\n    return (\r\n        <div className=\"clock\">\r\n            <span className=\"clock-font\">{time.format('hh')}:</span>\r\n            <span className=\"clock-font\">{time.format('mm')}</span>\r\n            <div className=\"clock-info\">\r\n                <div className=\"clock-font-small\">{time.format('A')}</div>\r\n                <div className=\"clock-font-small\">{time.format('ss')}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\nimport { Weather } from './components/Weather';\nimport './App.css';\nimport {DadJoke} from \"./components/DadJoke\";\nimport {Users} from \"./components/Users\";\nimport {Clock} from \"./components/Clock\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Clock/>\n        <Weather/>\n        <DadJoke/>\n        <Users/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}